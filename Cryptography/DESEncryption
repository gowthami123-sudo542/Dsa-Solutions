//Encryption

import java.util.Arrays;


public class DESSymmetric
{

    //Tables required for generating keys.
static int[] pc1={57, 49, 41, 33, 25,
                      17, 9, 1, 58, 50, 42, 34, 26,
                      18, 10, 2, 59, 51, 43, 35, 27,
                      19, 11, 3, 60, 52, 44, 36, 63,
                      55, 47, 39, 31, 23, 15, 7, 62,
                      54, 46, 38, 30, 22, 14, 6, 61,
                      53, 45, 37, 29, 21, 13, 5, 28,
                      20, 12, 4 };
 static   int [] pc2={14, 17, 11, 24, 1, 5, 3,
                      28, 15, 6, 21, 10, 23, 19, 12,
                      4, 26, 8, 16, 7, 27, 20, 13, 2,
                      41, 52, 31, 37, 47, 55, 30, 40,
                      51, 45, 33, 48, 44, 49, 39, 56,
                      34, 53, 46, 42, 50, 36, 29, 32};
static int [] leftshit={ 1, 1, 2, 2, 2, 2, 2, 2,
                            1, 2, 2, 2, 2, 2, 2, 1};
    //Tables required for generating data.
    //Initial Permutation
   static int[] IP = { 58, 50, 42, 34, 26, 18,
                     10, 2, 60, 52, 44, 36, 28, 20,
                     12, 4, 62, 54, 46, 38,
                     30, 22, 14, 6, 64, 56,
                     48, 40, 32, 24, 16, 8,
                     57, 49, 41, 33, 25, 17,
                     9, 1, 59, 51, 43, 35, 27,
                     19, 11, 3, 61, 53, 45,
                     37, 29, 21, 13, 5, 63, 55,
                     47, 39, 31, 23, 15, 7 };
    //Expansion or permutation table
   static int[] EP = { 32, 1, 2, 3, 4, 5, 4,
                     5, 6, 7, 8, 9, 8, 9, 10,
                     11, 12, 13, 12, 13, 14, 15,
                     16, 17, 16, 17, 18, 19, 20,
                     21, 20, 21, 22, 23, 24, 25,
                     24, 25, 26, 27, 28, 29, 28,
                     29, 30, 31, 32, 1 };
    //Substitution /choice Box
   static int[][][] sbox = {
            { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
              { 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
              { 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
              { 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 } },
 
            { { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
              { 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
              { 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
              { 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 } },
            { { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
              { 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
              { 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
              { 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 } },
            { { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
              { 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
              { 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
              { 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 } },
            { { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
              { 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
              { 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
              { 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 } },
            { { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
              { 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
              { 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
              { 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 } },
            { { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
              { 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
              { 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
              { 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 } },
            { { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
              { 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
              { 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
              { 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } }
        };
    
    //Inverse Permutation table
     
       static int[] IP1 = { 40, 8, 48, 16, 56, 24, 64,
                      32, 39, 7, 47, 15, 55,
                      23, 63, 31, 38, 6, 46,
                      14, 54, 22, 62, 30, 37,
                      5, 45, 13, 53, 21, 61,
                      29, 36, 4, 44, 12, 52,
                      20, 60, 28, 35, 3, 43,
                      11, 51, 19, 59, 27, 34,
                      2, 42, 10, 50, 18, 58,
                      26, 33, 1, 41, 9, 49,
                      17, 57, 25 };
        
    
      //Straight Permutation Table
       static int[] P = { 16, 7, 20, 21, 29, 12, 28,
                    17, 1, 15, 23, 26, 5, 18,
                    31, 10, 2, 8, 24, 14, 32,
                    27, 3, 9, 19, 13, 30, 6,
                    22, 11, 4, 25 };  
        
        
   public static String Binary(String a)
   {
     
        int len=a.length();
       
       String Binarychar="";
       int k=0;
       for(int i=0;i<len;i++)
       {
            String result="";
            char ch[]=a.toCharArray();
           
            for(int j=0;j<ch.length;j++)
            {
               String s=Character.toString(ch[j]).toUpperCase();  
               int decimal = Integer.parseInt(s,16); 
             
               String binary = Integer.toBinaryString(decimal);
               if(binary.length()<4)
               {
                 if(binary.length()==3)
                 {
                     binary="0"+binary;
                 }
                 if(binary.length()==2)
                 {
                     binary="0"+"0"+binary;
                 }
                 if(binary.length()==1)
                 {
                     binary="0"+"0"+"0"+binary;
                 }
               }
                
               result=result+binary;
               Binarychar=result;
            }
            k++;
               
       }
        
       return  Binarychar;
        
        
        
        
       
   }
   public static String permutatedgeneratedkey(int[] pc,String key)
   {
       String binarykey=Binary(key);
       String fiftysixbitkey="";
       for(int i=0;i<pc.length;i++)
       {
          fiftysixbitkey+=binarykey.charAt(pc[i]-1); 
          //fiftysixbitkey=Hex(fiftysixbitkey);
       }
       return fiftysixbitkey;    
   }
    public  static String leftrotate(String str, int d)
    {
            String ans = str.substring(d) + str.substring(0, d);
            return ans;
    }
     public static  String[] getKeys(String key)
        {
            String keys[] = new String[16];
            // first key permutation
            String  Binarykey =permutatedgeneratedkey(pc1, key);
            for (int i = 0; i < 16; i++) {
                Binarykey =leftrotate(Binarykey.substring(0, 28),leftshit[i])
                      + leftrotate(Binarykey.substring(28, 56),
                                           leftshit[i]);
                // second key permutation
                keys[i] =permutatedgeneratedkey(pc2, Binarykey);
            }
            return keys;
     
        }
          
       public static String xor(String a, String b)
        {
           String xoroutput="";
       for(int i=0;i<a.length();i++)
       {
         xoroutput +=a.charAt(i)^b.charAt(i);
       }
       return xoroutput;
        }
       public static String sBox(String a)
       {
           
           String output = "";
            a = Binary(a);
            for (int i = 0; i < 48; i += 6) {
                String temp = a.substring(i, i + 6);
                int num = i / 6;
                int row = Integer.parseInt(
                    temp.charAt(0) + "" + temp.charAt(5), 2);
                int col = Integer.parseInt(
                    temp.substring(1, 5), 2);
                output += Integer.toHexString(
                    sbox[num][row][col]);
            }
            return output;
       }
       
       
          
      public static String round(String input, String key, int num)
        {
            // fk
            String left = input.substring(0, 32);
          
            String temp=input.substring(32,64);
            String right = temp;
         
            // Expansion permutation
            temp = permutatedgeneratedkey(EP, temp);
            // xor temp and round key
            temp = xor(temp, key);
            // lookup in s-box table
            temp = sBox(temp);
            // Straight D-box
            temp = permutatedgeneratedkey(P, temp);
            // xor
            left = xor(left, temp);
            System.out.println("-----------Right half of String"+"----------"+"Left half of the string"+"--------------------key"+(num+1));
            System.out.println("Round "
                               + (num + 1) + " "
                               + right
                               + " " + left + " "
                               + key);
 
            // swapper
            return right + left;
        }
     public static String Encryption(String plaintext,String key)
     {
         
             int i;
            // get round keys
            String keys[] = getKeys(key);
 
            // initial permutation
            String IpString=permutatedgeneratedkey(IP, plaintext);
        
            System.out.println(
                "After initial permutation: "
                +  IpString);
            System.out.println(
                "After splitting: L0="
                + IpString.substring(0, 32)
                + " R0="
                +IpString.substring(32,64) + "\n");
 
            // 16 rounds
            for (i = 0; i < 16; i++) {
               IpString= round(IpString, keys[i], i);
            }
 
            // 32-bit swap
           IpString =IpString.substring(32, 64)
                        + IpString.substring(0,32);
 
            // final permutation
           IpString = permutatedgeneratedkey(IP1, IpString);
            return  IpString;
         
     }
   
  // binary to hexadecimal conversion
       public static String Hex(String input)
        {
            int n = (int)input.length() / 4;
            input = Long.toHexString(
                Long.parseUnsignedLong(input, 2));
            while (input.length() < n)
                input = "0" + input;
            return input;
        }
   public static String hexaDeciamlString(String a)
   {
    
      
      int length=a.length();
      String hexacharacters="";
      int k=0;
      
      for(int i=0;i<length;i++)
      {
       String temp="";
       char ch[]=a.toCharArray();
        for(int j = 0; j < ch.length; j++) {
        String hexString = Integer.toHexString(ch[j]);
  
        temp=temp+hexString;
        
        hexacharacters=temp;
      }
      k++;
      }
     
      return hexacharacters;
      
   }
 
   
   public static void main(String[] args)
   {
       String hexkey="133457799BBCDFF1";
       String text="gowthami";
     
       String plaintext=hexaDeciamlString(text);
       System.out.println("The Hexa Decimal of the String->"+plaintext);
       String BinaryPlaintext=Binary(plaintext);
       System.out.println("The Binary format of the plaintext is->"+BinaryPlaintext);
       System.out.println("The length of the Binary key is->"+BinaryPlaintext.length());
       
       String Binarykey=Binary(hexkey);
       System.out.println("The Binary format of the key is->"+Binarykey);
       System.out.println("The length of the Binary key is->"+Binarykey.length());
       
     
       
       String pc1key=permutatedgeneratedkey(pc1,hexkey);
       System.out.println("The permuatation of the key is ->"+pc1key);
       System.out.println("The length of the pc1 key is ->"+pc1key.length());
       //String leftcircularkey=leftCircularShift(pc1key,leftshit[0]);
      // leftCircularShift(pc1key,leftshit[0]);
      /* String lefthalf=pc1key.substring(0,28);
       String righthalf=pc1key.substring(28,56);
       System.out.println("the length of the lefthalf is->"+lefthalf.length());
       System.out.println("the length of the righthalf is->"+righthalf.length());
       System.out.println("The left half of the pc1key is->"+lefthalf);
       System.out.println("The right half of the pc1key is->"+righthalf);
       System.out.println(leftrotate(lefthalf,leftshit[0]));
       System.out.println(leftrotate(righthalf,leftshit[0]));*/
    
      
       System.out.println(Arrays.toString(getKeys(hexkey)));
       
       
       String Encrpytedtext=Encryption(plaintext,hexkey);
       System.out.println("The Encrypted message ->"+Hex(Encrpytedtext));
        
       
   }
   
   
     
    
}
