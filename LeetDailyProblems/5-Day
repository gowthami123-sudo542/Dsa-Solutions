//O(n/2)
//Binary Search
//merge sort
//recursion
class Solution {
    public ListNode mergeKLists(ListNode[] lists) 
    {
        
        
      if(lists==null||lists.length==0)  
          

      {
          return null;
      }
          
      
      int last=lists.length-1;
    while(last!=0)
    {
       int i=0;
       int j=last;
        
        while(i<j)
        {
            
           lists[i]=mergeTwoLists(lists[i],lists[j]);
            i++;
            j--;

            
        }
        if(i>=j)
        {
          last=j;  
        }      
            
    }
        return lists[0];
        
    }
    
    public ListNode mergeTwoLists(ListNode list1, ListNode list2)
    {
       
       ListNode FinalList=new ListNode();
       ListNode temp=FinalList;
        
        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                temp.next=list1;
                list1=list1.next;
                temp=temp.next;
            }
            else
            {
                 temp.next=list2;
                 list2=list2.next;
                temp=temp.next;
            } 
        }
        // if temp.next is not null 
        
        temp.next=(list1!=null)?list1:list2;
        // why we are using the Final.next is because intially FinalList value is zero.
        return  FinalList.next;    
    }
    
    
}
